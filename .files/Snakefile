'''Snakefile for MIS post-imputation QC
   Version 0.1.1'''

from scripts.parse_config import parser
from getpass import getuser

configfile: "config.yaml"
shell.executable("/bin/bash")
shell.prefix("PATH=" + config["anaconda"] + ":$PATH; ")

BPLINK = ["bed", "bim", "fam"]

CHROM, SAMPLE, INPATH, KEEP_COMMAND = parser(config)

tempdir = "/sc/orga/scratch/{}/temp/".format(getuser())


def flatten(nested):
    flat = []
    for el in nested:
        if not isinstance(el, list):
            flat.append(el)
        else:
            flat += flatten(el)
    return flat


# Change filtering based on presence of rsq2
qualfilt = "(R2 >= {R2} && MAF >= {MAF})".format(
    R2=config["qc"]["rsq"], MAF=config["qc"]["maf"])
if config["qc"]["rsq2"] and config["qc"]["rsq2"] != 'NA':
    qualfilt += " || (R2 >= {R2} && MAF < {MAF})".format(
        R2=config["qc"]["rsq2"], MAF=config["qc"]["maf"])

# remove subjects if sample filtering file is provided
sampfilt = ""
if config["exclude_samp"] or config["include_samp"]:
    sampfilt += "bcftools view --samples-file "
    if config["exclude_samp"]:
        sampfilt += "^{}".format(config["exclude_samp"])
    if config["include_samp"]:
        sampfilt += "{}".format(config["include_samp"])

outs = dict(
    stat_report=expand("stats/{sample}_impStats.html", sample=SAMPLE),
    vcf_bycohort=expand("data/{sample}_chrall_filtered.vcf.gz", sample=SAMPLE),
    vcf_merged="data/all_chrall_filtered.vcf.gz",
    bgen_bycohort=expand("data/{sample}_chrall_filtered.bgen", sample=SAMPLE),
    bgen_merged="data/merged/merged_chrall_filtered.bgen",
    plink_bycohort=expand("data/{sample}_chrall_filtered.{ext}",
                          sample=SAMPLE, ext=BPLINK),
    plink_merged=expand("data/all_chrall_filtered.{ext}", ext=BPLINK)
            )

outputs = [outs[x] for x in config["outputs"]]
outputs = flatten(outputs)

rule all:
    input: outputs

rule stats:
    input: "scripts/Post_imputation.Rmd"
    output: "stats/{sample}_impStats.html"
    params:
        path = INPATH + "{sample}/",
        chrom = config["chroms"],
        cohort = "{sample}",
        maf = config["qc"]["maf"],
        rsq = config["qc"]["rsq"],
        rsq2 = config["qc"]["rsq2"],
        sampsize = config["qc"]["sampsize"],
        out = "{sample}_impStats.html",
        output_dir = "stats"
    shell:
        "module load R/3.4.3 pandoc/2.1.3; RSTUDIO_PANDOC=$(which pandoc); "
        "R -e 'rmarkdown::render("
        """"{input}", output_file = "{params.out}", \
output_dir = "{params.output_dir}", params = list(\
path = "{params.path}", cohort = "{params.cohort}", \
chrom = "{params.chrom}", maf = {params.maf}, \
rsq = {params.rsq}, rsq2 = {params.rsq2}))' --slave
        """

# Sample filtering rules

filter_in = INPATH + "{sample}/chr{chrom}.dose.vcf.gz"
filter_annotate = ("bcftools annotate -i \"%FILTER='GENOTYPED' || "
                   "{params.filt}\" -Oz -o {output} "
                   "--set-id '%CHROM:%POS:%REF:%ALT' --threads 8")
filter_out = "data/by_chrom/{sample}_chr{chrom}_filtered.vcf.gz"

if sampfilt:
    rule filters:
        input: filter_in
        output: filter_out
        params:
            filt = qualfilt,
            sf = sampfilt
        threads: 8
        shell:
            "module load bcftools; "
            "{params.sf} --force-samples -Oz --threads 8 {input} | "
            "" + filter_annotate

else:
    rule filters:
        input: filter_in
        output: filter_out
        params:
            filt = qualfilt,
            sf = sampfilt
        threads: 8
        shell: "module load bcftools; " + filter_annotate + " {input}"

rule rename:
    input:
        vcf = rules.filters.output,
        mapping = config['rename'] if config['rename'] else ""
    output: "data/by_chrom/{sample}_chr{chrom}_filtered_renamed.vcf.gz"
    shell:
        "module load bcftools; "
        "bcftools reheader --samples {input.mapping} -o {output} {input.vcf}"

if config['rename']:
    renamed_cat = "data/by_chrom/{{sample}}_chr{chrom}_filtered_renamed.vcf.gz"
    renamed = "data/by_chrom/{sample}_chr{chrom}_filtered_renamed.vcf.gz"
    renamed_merge = "data/by_chrom/{sample}_chr{{chrom}}_filtered_renamed.vcf.gz"
else:
    renamed_cat = "data/by_chrom/{{sample}}_chr{chrom}_filtered.vcf.gz"
    renamed = "data/by_chrom/{sample}_chr{chrom}_filtered.vcf.gz"
    renamed_merge = "data/by_chrom/{sample}_chr{{chrom}}_filtered.vcf.gz"

rule concat_chroms_samp:
    input: expand(renamed_cat, chrom=CHROM)
    output: "data/{sample}_chrall_filtered.vcf.gz"
    threads: 8
    shell:
        "module load bcftools; "
        "bcftools concat -o {output} -Oz --threads 8 {input}"

rule index_samples_chrom:
    input: renamed
    output: renamed + ".tbi"
    shell:
        "module load bcftools; "
        "bcftools index -t {input}"

rule merge_samples_chrom:
    input:
        vcf = expand(renamed_merge, sample=SAMPLE),
        tbi = expand(renamed_merge + ".tbi", sample=SAMPLE)
    output: "data/by_chrom/all_chr{chrom}_filtered.vcf.gz"
    threads: 8
    shell:
        "module load bcftools; "
        "bcftools merge -m none -o {output} -Oz --threads 8 {input.vcf}"

rule concat_chroms_all:
    input: expand("data/by_chrom/all_chr{chrom}_filtered.vcf.gz", chrom=CHROM)
    output: "data/all_chrall_filtered.vcf.gz"
    threads: 8
    shell:
        "module load bcftools; "
        "bcftools concat -o {output} -Oz --threads 8 {input}"

rule make_plink_all:
    input: rules.concat_chroms_all.output
    output: expand("data/all_chrall_filtered.{ext}", ext=BPLINK)
    params:
        out_plink = "data/all_chrall_filtered"
    threads: 10
    shell:
        "module load plink2/dev.26mar; "
        "plink2 --vcf {input} --memory 10000 --threads 10 --make-bed "
        "--out {params.out_plink}"

rule make_plink_samp:
    input: rules.concat_chroms_samp.output
    output: expand("data/{{sample}}_chrall_filtered.{ext}", ext=BPLINK)
    params:
        out_plink = "data/{sample}_chrall_filtered"
    threads: 10
    shell:
        "module load plink2/dev.26mar; "
        "plink2 --vcf {input} --memory 10000 --threads 10 --make-bed "
        "--out {params.out_plink}"

rule make_bgen:
    input:
        gen = renamed
    output:
        bgen = temp(tempdir + "{sample}_chr{chrom}_filtered.bgen"),
        samp = temp(tempdir + "{sample}_chr{chrom}.sample")
    shell:
        "module load qctool/v2; "
        "qctool -g {input.gen} -vcf-genotype-field GP "
        "-os {output.samp} -og {output.bgen}"

rule cat_bgen_samp:
    input:
        gen = expand(tempdir + "{{sample}}_chr{chrom}_filtered.bgen", chrom=CHROM),
        samp = expand(tempdir + "{{sample}}_chr{chrom}.sample", chrom=CHROM)[0]
    output:
        gen = "data/{sample}_chrall_filtered.bgen",
        samp = "data/{sample}_chrall.sample"
    shell:
        "module load bgen; "
        "cat-bgen -g {input.gen} -og {output.gen}; "
        "cp {input.samp} {output.samp}"

bga_gen = expand(tempdir + "{sample}_chr{{chrom}}_filtered.bgen", sample=SAMPLE)
bga_samp = expand(tempdir + "{sample}_chr{{chrom}}.sample", sample=SAMPLE)

rule make_bgen_allsamp:
    input:
        gen = bga_gen,
        samp = bga_samp
    output:
        bgen = "data/merged/merged_chr{chrom}_filtered.bgen",
        samp = "data/merged/merged_chr{chrom}.sample"
    params:
        args = " ".join(["-g {} -s {}".format(gen, samp) for gen, samp in zip(bga_gen, bga_samp)])
    threads: 10
    shell:
        "module load qctool/v2; "
        "qctool {params.args} -og {output.bgen} -os {output.samp} -threads 10"

rule cat_bgen_allsamp:
    input:
        gen = expand("data/merged/merged_chr{chrom}_filtered.bgen", chrom=CHROM),
        samp = expand("data/merged/merged_chr{chrom}.sample", chrom=CHROM)[0]
    output:
        gen = "data/merged/merged_chrall_filtered.bgen",
        samp = "data/merged/merged_chrall.sample"
    shell:
        "module load bgen; "
        "cat-bgen -g {input.gen} -og {output.gen}; "
        "cp {input.samp} {output.samp}"
