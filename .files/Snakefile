'''Snakefile for MIS post-imputation QC
   Version 0.0.1'''

configfile: "config.yaml"
shell.executable("/bin/bash")
shell.prefix("PATH=" + config["anaconda"] + ":$PATH; ")

BPLINK = ["bed", "bim", "fam"]

from scripts.parse_config import parser

CHROM, SAMPLE, INPATH, KEEP_COMMAND = parser(config)

localrules: all, var_qc, subj_qc, split_to_vcf

# Change filtering based on presence of rsq2
qualfilt = "(R2 >= {R2} && MAF >= {MAF})".format(
    R2 = config["qc"]["rsq"], MAF = config["qc"]["maf"])
if config["qc"]["rsq2"]:
    qualfilt += " || (R2 >= {R2} && MAF < {MAF})".format(
        R2 = config["qc"]["rsq2"], MAF = config["qc"]["maf"])

# remove subjects if sample filtering file is provided
sampfilt = ""
if config["exclude_samp"]:
    sampfilt += " --samples-file {}".format(config["exclude_samp"])

rule all:
    input:
        expand("stats/{sample}_impStats.html", sample=SAMPLE),
        expand("data/{sample}_filtered.bgen", sample=SAMPLE)
        "data/all_filtered.bgen"

rule stats:
    input: "scripts/Post_imputation.Rmd"
    output: "stats/{sample}_impStats.html"
    params:
        path = INPATH + "{sample}/",
        chrom = config["chroms"],
        cohort = "{sample}",
        maf = config["qc"]["maf"],
        rsq = config["qc"]["rsq"],
        rsq2 = config["qc"]["rsq2"],
        sampsize = config["qc"]["sampsize"],
        out = "{sample}_impStats.html",
        output_dir = "stats"
    shell:
        "module load R/3.4.3 pandoc; "
        "R -e 'rmarkdown::render("
        """"{input}", output_file = "{params.out}", \
output_dir = "{params.output_dir}", params = list(\
path = "{params.path}", cohort = "{params.cohort}", \
chrom = "{params.chrom}", maf = {params.maf}, \
rsq = {params.rsq}, rsq2 = {params.rsq2}))' --slave
        """

rule filters:
    input: INPATH + "/{sample}/chr{chrom}.dose.vcf.gz"
    output: "/data/by_chrom/{sample}_chr{chrom}_filtered.vcf.gz"
    params:
        filt = qualfilt,
        sf = sampfilt
    shell: "module load bcftools; "
        """bcftools annotate -i "%FILTER='GENOTYPED' || {params.filt}" """
        "-Oz -o {output} --set-id '%CHROM:%POS:%REF:%ALT'{params.sf}"

rule concat_chroms:
    input: expand("/data/by_chrom/{{sample}}_chr{chrom}_filtered.vcf.gz",
                  chrom = CHROM)
    output: "/data/{sample}_filtered.vcf.gz"
    threads: 4
    shell: "module load bcftools; "
        "bcftools concat -o {output} -Oz --threads 4 {input}"

rule: merge_samples:
    input: expand("/data/{sample}_filtered.vcf.gz", sample = SAMPLE)
    output: "/data/all_filtered.vcf.gz"
    threads: 4
    shell: "module load bcftools; "
        "bcftools merge -o {output} -Oz --threads 4 {input}"

rule make_gen_samp: #make oxford dosage files
    input: "/data/{sample}_filtered.vcf.gz"
    output:
        gen = temp("/data/{sample}_filtered.gen"),
        samp = "/data/{sample}_filtered.sample"
    params:
        ox = "/data/{sample}_filtered"
    shell:
        "plink2 --vcf {input} dosage=DS --export oxford --out {params.ox}

rule make_bgen_samp:
    input: rules.make_gen.output
    output:
        bgen = "data/{sample}_filtered.bgen",
        samp = "data/{sample}_filtered.fixed.sample"
    shell:
        "awk 'NR > 1 {$1=$2} 1' {input.samp} > {output.samp}; "
        "qctool -g {input.gen} -s {output.samp} -og {output.bgen}"

rule make_gen_all: #make oxford dosage files
    input: "/data/all_filtered.vcf.gz"
    output:
        gen = temp("/data/all_filtered.gen"),
        samp = "/data/all_filtered.sample"
    params:
        ox = "/data/all_filtered"
    shell: rules.make_gen_samp.shell

rule make_bgen_all:
    input: rules.make_gen_all.output
    output:
        bgen = "data/all_filtered.bgen",
        samp = "data/all_filtered.fixed.sample"
    shell: make_bgen_samp.shell
